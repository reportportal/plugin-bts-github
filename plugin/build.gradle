import com.github.spotbugs.SpotBugsTask
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id 'java'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id "com.github.spotbugs" version "3.0.0"
    id "com.github.node-gradle.node" version "3.5.1"
    id "org.openapi.generator" version "6.6.0"
}

apply from: 'project-properties.gradle'
apply from: 'ui.gradle'

repositories {
    mavenCentral()
    mavenLocal()
    if (releaseMode) {
        dependencyRepos.forEach { path ->
            maven {
                setUrl("https://maven.pkg.github.com/reportportal/${path}")
                credentials {
                    username = findProperty("githubUserName")
                    password = findProperty("githubToken")
                }
            }
        }
    } else {
        maven { url 'https://jitpack.io' }
    }
}

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:' + getProperty('bom.version')
                : "com.github.reportportal:commons-bom:$reportportalCommonsBomVersion")
        mavenBom "org.junit:junit-bom:$junitBomVersion"
    }
}

sourceSets.main.java.srcDirs += "$buildDir/generated/src/main/java"

dependencies {
    implementation 'com.epam.reportportal:plugin-api'
    annotationProcessor 'com.epam.reportportal:plugin-api'

    implementation "org.apache.commons:commons-lang3"
    shadow "org.openapitools:jackson-databind-nullable:$openApiNullableVersion"
    shadow "org.apache.commons:commons-collections4:$apacheCommonsCollectionsVersion"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "uk.co.jemos.podam:podam:$podamVersion"
    testImplementation "org.openapitools:jackson-databind-nullable:$openApiNullableVersion"
}

spotbugs {
    sourceSets = [sourceSets.main]
    reportLevel = "high"
    excludeFilter = file('spotbugsFilter.xml')
}
tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

test {
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events = ['failed']
        exceptionFormat = 'short'
    }
    reports {
        junitXml.enabled = true
    }
}

build.dependsOn jacocoTestReport

artifacts {
    archives shadowJar
}

sourceSets {
    main {
        resources
                {
                    exclude '**'
                }
    }
}

jar {
    from("src/main/resources") {
        into("/resources")
        exclude "github-api-spec.yaml"
    }
    from("ui/build") {
        into("/resources")
    }
    manifest {
        attributes(
                "Class-Path": configurations.compile.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginId}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Report Portal",
                "Plugin-Class": "com.epam.reportportal.extension.github.GitHubPlugin",
                "Plugin-Service": "api"
        )
    }
}

shadowJar {
    from("src/main/resources") {
        into("/resources")
        exclude "github-api-spec.yaml"
    }
    from("ui/build") {
        into("/resources")
    }
    configurations = [project.configurations.shadow]
    zip64 true
    dependencies {
        exclude(dependency('com.github.reportportal:'))
        exclude(dependency('com.epam.reportportal:'))
        exclude(dependency('org.springframework:'))
        exclude(dependency('org.springframework.security:'))
        exclude(dependency('org.springframework.data:'))
        exclude(dependency('org.springframework.boot:'))
        exclude(dependency('ch.qos.logback:'))
        exclude(dependency('org.slf4j:'))
        exclude(dependency('com.fasterxml.jackson.core:'))
        exclude(dependency('org.apache.commons:commons-lang3:'))
    }

    relocate "org.apache.commons.collections4", "shadow.org.apache.commons.collections4"
    relocate "org.openapitools", "shadow.org.openapitools"
}

task openApiGenerateClient(type: GenerateTask) {
    generatorName = "java"
    generateApiDocumentation = false
    inputSpec = "$rootDir/plugin/src/main/resources/github-api-spec.yaml"
    ignoreFileOverride = "$rootDir/plugin/.openapi-generator-ignore"
    outputDir = "$buildDir/generated"
    modelNameSuffix = "Dto"
    configOptions = [
            library                       : "resttemplate",
            dateLibrary                   : "java8",
            annotationLibrary             : "none",
            openApiNullable               : "true",
            additionalModelTypeAnnotations: """
                @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
            """
    ]
    globalProperties = [
            apiDocs   : "false",
            modelDocs : "false",
            apiTests  : "false",
            modelTests: "false"
    ]
    apiPackage = "com.epam.reportportal.extension.github.generated.api"
    modelPackage = "com.epam.reportportal.extension.github.generated.dto"
}

task plugin(type: Jar) {
    getArchiveBaseName().set("plugin-${pluginId}")
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compile
    }
    extension('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}

compileJava.dependsOn npm_run_build
compileJava.dependsOn openApiGenerateClient
